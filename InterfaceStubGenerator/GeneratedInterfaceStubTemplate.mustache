using System;
using System.Net.Http;
{{#UsingList}}
using {{Item}};
{{/UsingList}}

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#if REFIT__NOTIOS
// NB: This is done in this bizarro way because Xamarin.iOS doesn't allow you
// to add compiler defines in any sane way via a targets file, so we can't gate
// the MonoTouch Foundation using
//
// Fortunately, we'll take advantage of a *different* bug in Xamarin tools, where
// the Preserve type's namespace doesn't actually matter, it just looks for a
// attribute named "Preserve".
namespace MonoTouch.Foundation
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    public sealed class PreserveAttribute : Attribute
    {
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#endif

{{#ClassList}}
namespace {{Namespace}}
{
    using MonoTouch.Foundation;

    [Preserve]
    public partial class AutoGenerated{{InterfaceName}} : {{InterfaceName}}
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGenerated{{InterfaceName}}(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

{{#MethodList}}
        public virtual {{ReturnType}} {{Name}}({{ArgumentListWithTypes}})
        {
            var arguments = new object[] { {{ArgumentList}} };
            return ({{ReturnType}}) methodImpls["{{Name}}"](Client, arguments);
        }
{{/MethodList}}
    }
}

{{/ClassList}}
