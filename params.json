{"name":"Refit","tagline":"The automatic type-safe REST library for Xamarin and .NET","body":"## Refit: The automatic type-safe REST library for Xamarin and .NET\r\n\r\nRefit is a library heavily inspired by Square's\r\n[Retrofit](http://square.github.io/retrofit) library, and it turns your REST\r\nAPI into a live interface:\r\n\r\n```cs\r\npublic interface IGitHubApi\r\n{\r\n    [Get(\"/users/{user}\")]\r\n    Task<User> GetUser(string user);\r\n}\r\n```\r\n\r\nThe `RestService` class generates an implementation of `IGitHubApi` that uses\r\n`HttpClient` to make its calls:\r\n\r\n```cs\r\nvar gitHubApi = RestService.For<IGitHubApi>(\"https://api.github.com\");\r\n\r\nvar octocat = await gitHubApi.GetUser(\"octocat\");\r\n```\r\n\r\n### Where does this work?\r\n\r\nRefit currently supports the following platforms:\r\n\r\n* Xamarin.Android\r\n* Xamarin.Mac\r\n* Desktop .NET 4.5 \r\n* Windows Phone 8\r\n* Silverlight 5\r\n\r\nSupport for the following platforms is coming soon:\r\n\r\n* Xamarin.iOS\r\n* Windows Store (WinRT)\r\n\r\n### API Attributes\r\n\r\nEvery method must have an HTTP attribute that provides the request method and\r\nrelative URL. There are five built-in annotations: Get, Post, Put, Delete, and\r\nHead. The relative URL of the resource is specified in the annotation.\r\n\r\n```cs\r\n[Get(\"/users/list\")]\r\n```\r\n\r\nYou can also specify query parameters in the URL:\r\n\r\n```cs\r\n[Get(\"/users/list?sort=desc\")]\r\n```\r\n\r\nA request URL can be updated dynamically using replacement blocks and\r\nparameters on the method. A replacement block is an alphanumeric string\r\nsurrounded by { and }. \r\n\r\nIf the name of your parameter doesn't match the name in the URL path, use the\r\n`AliasAs` attribute.\r\n\r\n```cs\r\n[Get(\"/group/{id}/users\")]\r\nTask<List<User>> GroupList([AliasAs(\"id\")] int groupId);\r\n```\r\n\r\nParameters that are not specified as a URL substitution will automatically be\r\nused as query parameters. This is different than Retrofit, where all\r\nparameters must be explicitly specified.\r\n\r\n```cs\r\n[Get(\"/group/{id}/users\")]\r\nTask<List<User>> GroupList([AliasAs(\"id\")] int groupId, [AliasAs(\"sort\")] string sortOrder);\r\n\r\nGroupList(4, \"desc\");\r\n>>> \"/group/4/users?sort=desc\"\r\n```\r\n\r\n### Body content\r\n\r\nOne of the parameters in your method can be used as the body, by using the\r\nBody attribute:\r\n\r\n```\r\n[Post(\"/users/new\")]\r\nTask CreateUser([Body] User user);\r\n```\r\n\r\nThere are three possibilities for supplying the body data, depending on the\r\ntype of the parameter:\r\n\r\n* If the type is `Stream`, the content will be streamed via `StreamContent`\r\n* If the type is `string`, the string will be used directly as the content\r\n* For all other types, the object will be serialized as JSON.\r\n\r\n### Retrieving the response\r\n\r\nNote that in Refit unlike in Retrofit, there is no option for a synchronous\r\nnetwork request - all requests must be async, either via `Task` or via\r\n`IObservable`. There is also no option to create an async method via a Callback\r\nparameter unlike Retrofit, because we live in the async/await future.\r\n\r\nSimilarly to how body content changes via the parameter type, the return type\r\nwill determine the content returned.\r\n\r\nReturning Task without a type parameter will discard the content and solely\r\ntell you whether or not the call succeeded:\r\n\r\n```cs\r\n[Post(\"/users/new\")]\r\nTask CreateUser([Body] User user);\r\n\r\n// This will throw if the network call fails\r\nawait CreateUser(someUser);\r\n```\r\n\r\nIf the type parameter is 'HttpResponseMessage' or 'string', the raw response\r\nmessage or the content as a string will be returned respectively.\r\n\r\n```cs\r\n// Returns the content as a string (i.e. the JSON data)\r\n[Get(\"/users/{user}\")]\r\nTask<string> GetUser(string user);\r\n\r\n// Returns the raw response, as an IObservable that can be used with the\r\n// Reactive Extensions\r\n[Get(\"/users/{user}\")]\r\nIObservable<string> GetUser(string user);\r\n```\r\n\r\n### What's missing / planned?\r\n\r\nCurrently Refit is missing the following features from Retrofit that are\r\nplanned for a future release soon:\r\n\r\n* Multipart requests (including file upload)\r\n* Form posts\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}