// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using {{RefitInternalNamespace}};

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
{{#ClassList}}
namespace {{Namespace}}
{
    {{#UsingList}}
    using {{Item}};
    {{/UsingList}}

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGenerated{{GeneratedClassSuffix}}{{#TypeParameters}}<{{.}}>
    {{/TypeParameters}} : {{InterfaceName}}{{#TypeParameters}}<{{.}}>
        {{/TypeParameters}}
        {{#ConstraintClauses}}
        {{.}}
        {{/ConstraintClauses}}

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGenerated{{GeneratedClassSuffix}}(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }
        {{#MethodList}}

        /// <inheritdoc />
        {{ReturnType}} {{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}}.{{Name}}{{#MethodTypeParameters}}<{{.}}>{{/MethodTypeParameters}}({{ArgumentListWithTypes}})
        {
            {{#IsRefitMethod}}
            var arguments = new object[] { {{ArgumentList}} };
            var func = requestBuilder.BuildRestResultFuncForMethod("{{Name}}", new Type[] { {{ArgumentTypesList}} }{{#MethodTypeParameterList}}, new Type[] { {{.}} }{{/MethodTypeParameterList}});
            return ({{ReturnType}})func(Client, arguments);
            {{/IsRefitMethod}}
            {{#IsDispose}}
            Client?.Dispose();
            {{/IsDispose}}
            {{#UnsupportedMethod}}
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
            {{/UnsupportedMethod}}
        }
            {{/MethodList}}
        {{#HasAnyMethodsWithNullableArguments}}

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
        {{/HasAnyMethodsWithNullableArguments}}
    }
}

            {{/ClassList}}
#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
